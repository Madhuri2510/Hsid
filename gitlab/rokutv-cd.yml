default:
  tags: 
    - dc-d-aw2-large-ss


stages:
  - download_artifact
  - Test_automation
  - mail-report

download_artifact:
  resource_group: rokutv-test-automation
  stage: download_artifact
  image: devopscoe-container.docker.imovetv.com/devops-jfrog-cli-alpine:latest
  before_script:
    - echo $CI_COMMIT_REF_NAME
    - jfrog config add artifactory-server --artifactory-url=$CI_REGISTRY --user=$CI_USER --password=$CI_USER_KEY --interactive=false
    - jfrog rt ping
    - git config --global user.email "rahul.r@dish.com"
    - git config --global user.name "rahul.r2"
  script: 
    - |- 
        if [[ $E2E == "TRUE" ]]; then
          echo "$E2E_Branch_Name"
          git clone -b $E2E_Branch_Name --single-branch https://oauth2:glpat-MHswy-xBwpEcRjLd74iD@gitlab.com/dish-cloud/dish-technology-and-strategy/dish-commercial-engineering/onstream-roku/onstream-roku-app.git
          MANIFEST_APP_TITLE="`cat ./onstream-roku-app/roku-app/manifest | grep title= | sed s/title=//g`"
          MANIFEST_APP_SUBTITLE="Roku Client"
          cat ./onstream-roku-app/roku-app/manifest | sed s/"$MANIFEST_APP_TITLE"/"\"$MANIFEST_APP_SUBTITLE"\"/g  > ./manifest.tmp
          source ./manifest.tmp
          rm ./manifest.tmp
          version=$major_version.$minor_version.$build_version
          echo $version
          mkdir -p onstream-roku-build
          rm -rf ./testing/app/roku/*.zip
          if [[ $E2E_Branch_Name == 'develop' ]]; then
            jfrog rt dl onstream/onstream-roku-client/develop/*/$version/
            mv ./onstream-roku-client/develop/*/$version/ ./onstream-roku-build/
            mv ./onstream-roku-build/roku-app-$buildtype-$version.zip ./testing/app/roku/
          else
            jfrog rt dl onstream/onstream-roku-client/release/$version/  
            ls onstream-roku-client/release/$version > pipeid.txt
            pipeline_id=`tail -n 1 pipeid.txt`
            echo "$pipeline_id"
            mv ./onstream-roku-client/release/$version/$pipeline_id/ ./onstream-roku-build/
            mv ./onstream-roku-build/$pipeline_id/roku-app-$buildtype-$version.zip ./testing/app/roku/
          fi
          pversion=`grep 'app:' ./testing/codecept.onstreamRoku.conf.js | awk '{print $2}' | sed 's/.\/app\/roku\///g' | sed "s/'//g" | sed 's/,//g'`
          echo $pversion
          ls ./onstream-roku-build/
          rm -rf onstream-roku-build onstream-roku-client onstream-roku-app pipeid.txt
          sed -i s/$pversion/roku-app-$buildtype-$version.zip/g ./testing/codecept.onstreamRoku.conf.js
          cat ./testing/codecept.onstreamRoku.conf.js
          git checkout -b $CI_COMMIT_REF_NAME
          git branch
          git remote set-url --push origin https://oauth2:glpat-MHswy-xBwpEcRjLd74iD@gitlab.com/dish-cloud/dish-technology-and-strategy/dish-commercial-engineering/onstream-automation/onstream-automation.git
          git add .
          git commit -am "$version bump to the roku config file"
          git push origin -uf $CI_COMMIT_REF_NAME
          echo "$version" > version.txt
        else
          if [[ $rh_version != "latest" ]]; then
            if [[ $buildtype != "dev"]]; then
              jfrog rt dl onstream/onstream-roku-client/release/$rh_version/  
              ls onstream-roku-client/release/$rh_version > pipeid.txt
              pipeline_id=`tail -n 1 pipeid.txt`
              echo "$pipeline_id"
              mv ./onstream-roku-client/release/$rh_version/$pipeline_id/ ./onstream-roku-build/
              mv ./onstream-roku-build/roku-app-$buildtype-$rh_version.zip ./testing/app/roku/
            else
              jfrog rt dl onstream/onstream-roku-client/develop/*/$rh_version/
              mv ./onstream-roku-client/develop/*/$rh_version/ ./onstream-roku-build/
              ls ./onstream-roku-build/
              mv ./onstream-roku-build/roku-app-$buildtype-$rh_version.zip ./testing/app/roku/
            fi
            pversion=`grep 'app:' ./testing/codecept.onstreamRoku.conf.js | awk '{print $2}' | sed 's/.\/app\/roku\///g' | sed "s/'//g" | sed 's/,//g'`
            echo $pversion
            rm -rf onstream-roku-build onstream-roku-client onstream-roku-app pipeid.txt
            sed -i s/$pversion/roku-app-$buildtype-$rh_version.zip/g ./testing/codecept.onstreamRoku.conf.js
            cat ./testing/codecept.onstreamRoku.conf.js
            echo "$rh_version" > version.txt
          else
          grep 'app:' ./testing/codecept.onstreamRoku.conf.js | awk '{print $2}' | sed 's/.\/app\/roku\/roku-app-$buildtype-//g' | sed "s/'//g" | sed 's/,//g' | sed 's/.zip//g' > version.txt
          cat version.txt 
          fi    
        fi
  artifacts:
    paths:
      - testing/codecept.onstreamRoku.conf.js
      - testing/app/roku/*.zip
      - version.txt

Test_automation:
  resource_group: rokutv-test-automation
  stage: Test_automation
  needs: 
    - download_artifact
  tags:
    - Onstream_automation_shell2
  script:
    - dir
    - md mochawesome-report;
    - Write-Host $nrokuip;
    - |-
        "$CI_JOB_ID" >> prejobid;
        git config --global user.email "rahul.r@dish.com";
        git config --global user.name "rahul.r2";
        git remote set-url --push origin https://oauth2:glpat-MHswy-xBwpEcRjLd74iD@gitlab.com/dish-cloud/dish-technology-and-strategy/dish-commercial-engineering/onstream-automation/onstream-automation.git;
        cd testing;
        $prokuip=Select-String -Path "codecept.onstreamRoku.conf.js" -Pattern "Rokuip" | %{($_ -split "\s+")[2]} | %{ $_ -replace ",", "" } | %{ $_ -replace "'", "" };
        (Get-Content codecept.onstreamRoku.conf.js) -replace "$prokuip","$nrokuip" | Out-File -encoding ASCII codecept.onstreamRoku.conf.js;
        Write-Host $prokuip;
        IF ($Rokutv_ModuleR -ne 'null') { 
          $Rokutv_ModuleR_array = $Rokutv_ModuleR.Split(","); 
          for ($i = 0; $i -lt $Rokutv_ModuleR_array.length; $i ++) { 
            Write-Host $Rokutv_ModuleR_array[$i]; 
            $b = $Rokutv_ModuleR_array[$i]; 
            (Get-Content testcases/OnStreamTestCases/${b}_test.js) -replace "Feature","xFeature" | Out-File -encoding ASCII testcases/OnStreamTestCases/${b}_test.js; 
            } 
          }
        npm install;
        IF ($E2E -eq 'TRUE'){
          IF ($E2E_Branch_Name -eq 'develop'){
            yarn codecept-run-onstream-roku --grep '(?=.*Roku)(?=.*sanity)';
            }
          ELSE {
            yarn codecept-run-onstream-roku --grep Roku;
            }
        }
        ELSE {
          yarn codecept-run-onstream-roku --grep Roku;
        }
        mv output/* ../mochawesome-report;
        dir ../mochawesome-report;
  artifacts:
    paths:
      - prejobid
      - mochawesome-report

mail-report:
  resource_group: rokutv-test-automation
  stage: mail-report
  image: onstream-cmp.docker.imovetv.com/automate-mail-report:latest
  needs:
    - download_artifact
    - Test_automation
  before_script:
    - apt-get update && apt-get install -y curl git zip jq
  script:
    - version=`cat version.txt`
    - echo "$version"
    - ls
    - cat prejobid
    - jobid=`cat prejobid`
    - jobidn=`echo $jobid | sed 's/\(.\{2\}\)//' | tr -d -c 0-9`
    - echo "$jobidn"
    - export report="${CI_PROJECT_URL}/-/jobs/$jobidn/artifacts/browse"
    - echo $report
    - mv mochawesome-report /app
    - export reciever=$roku_reciever
    - |- 
        if [[ $E2E == "TRUE" ]]; then
          case "$E2E_Branch_Name" in
          'develop') export cicd="SANITY"
          ;;
          *) export cicd="CICD PIPELINE"
          ;;
          esac
        else
          export cicd="CD PIPELINE"
        fi
    - cd /app
    - jq --arg roku_link $roku_analysis_link -c '.roku = $roku_link' ./email-report/reportLink.json > updatelink.json
    - mv updatelink.json ./email-report/reportLink.json && rm -rf updatelink.json
    - node sendMail.js ROKU $version | tee $CI_PROJECT_DIR/message.txt
    - cd $CI_PROJECT_DIR;
    - |-
        if grep -q -e "ROKU" message.txt; then
          source gitlab/script.sh;
          message=`cat message.txt`;
          SendMessageToHangoutsChat "$message";  
        fi
